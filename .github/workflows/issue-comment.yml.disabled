name: Issue Comment Workflow (Together API - DISABLED)

on:
  issues:
    types: [opened]

jobs:
  comment-on-issue:
    runs-on: self-hosted  # This specifies that the job should run on a self-hosted runner

    steps:
      - name: Check for Duplicate Issues
        id: duplicate_check
        run: |
          # Get the issue title and body
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # Fetch recent open issues
          OPEN_ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=open&per_page=15" | \
            jq -r '.[] | select(.number != ${{ github.event.issue.number }}) | "Issue #\(.number): \(.title)\nDescription: \(.body)\n"')
          
          # Create Together API request payload
          DUPLICATE_PAYLOAD=$(cat << EOF
          {
            "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
            "messages": [
              {
                "role": "system",
                "content": "You are a helpful issue analyzer for a GitHub repository. Your task is to determine if a new issue is likely a duplicate of existing open issues. Respond with ONLY ONE of these exact formats: 1. If it's a duplicate: 'DUPLICATE:#X' where X is the issue number it duplicates, 2. If it's not a duplicate: 'UNIQUE'. Don't include any other text in your response."
              },
              {
                "role": "user",
                "content": "New Issue Title: ${ISSUE_TITLE}\nNew Issue Body: ${ISSUE_BODY}\n\nExisting Open Issues:\n${OPEN_ISSUES}\n\nIs this a duplicate? Respond with ONLY 'DUPLICATE:#X' or 'UNIQUE'."
              }
            ],
            "temperature": 0.1,
            "max_tokens": 50
          }
          EOF
          )
          
          # Call Together API to analyze for duplicates
          DUPLICATE_RESULT=$(curl -s -X POST "https://api.together.xyz/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.TOGETHER_API_KEY }}" \
            -d "${DUPLICATE_PAYLOAD}" | jq -r '.choices[0].message.content' | tr -d '[:space:]')
          
          # Save the duplicate check result
          echo "result=${DUPLICATE_RESULT}" >> $GITHUB_OUTPUT
          
          # Extract duplicate issue number if applicable
          if [[ "${DUPLICATE_RESULT}" == DUPLICATE:* ]]; then
            DUPLICATE_ISSUE=$(echo "${DUPLICATE_RESULT}" | cut -d':' -f2)
            echo "duplicate_issue=${DUPLICATE_ISSUE}" >> $GITHUB_OUTPUT
            echo "is_duplicate=true" >> $GITHUB_OUTPUT
          else
            echo "is_duplicate=false" >> $GITHUB_OUTPUT
          fi

      - name: Handle Duplicate Issue
        if: steps.duplicate_check.outputs.is_duplicate == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const duplicateIssue = '${{ steps.duplicate_check.outputs.duplicate_issue }}';
            
            // Add duplicate label
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['duplicate']
            });
            
            // Comment about the duplicate
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `This appears to be a duplicate of issue #${duplicateIssue}. Closing this issue as a duplicate.`
            });
            
            // Close the issue
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              state_reason: 'duplicate'
            });

      - name: Moderate Issue Content
        id: moderation
        if: steps.duplicate_check.outputs.is_duplicate != 'true'
        run: |
          # Get the issue title and body
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # Create Together API request payload for moderation
          MODERATION_PAYLOAD=$(cat << EOF
          {
            "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
            "messages": [
              {
                "role": "system",
                "content": "You are a helpful issue moderator for a GitHub repository. Analyze the issue and determine if it's relevant to a software project. Guidelines for classification: RELEVANT: Issues that describe bugs, feature requests, or questions about the software's functionality. Even vague reports about software not working should be considered RELEVANT if they appear to be about the software. IRRELEVANT: Spam, marketing, or completely unrelated content. UNCLEAR: Only use this if you cannot determine if it's related to the software at all. Respond with ONLY ONE of these exact words: 'RELEVANT', 'IRRELEVANT', or 'UNCLEAR'. Don't include any other text in your response."
              },
              {
                "role": "user",
                "content": "Issue Title: ${ISSUE_TITLE}\nIssue Description: ${ISSUE_BODY}\n\nIs this issue relevant to the software project? Respond with ONLY 'RELEVANT', 'IRRELEVANT', or 'UNCLEAR'."
              }
            ],
            "temperature": 0.1,
            "max_tokens": 50
          }
          EOF
          )
          
          # Call Together API to analyze relevance
          MODERATION_RESULT=$(curl -s -X POST "https://api.together.xyz/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.TOGETHER_API_KEY }}" \
            -d "${MODERATION_PAYLOAD}" | jq -r '.choices[0].message.content' | tr -d '[:space:]' | tr '[:lower:]' '[:upper:]')
          
          # Save the moderation result
          echo "result=${MODERATION_RESULT}" >> $GITHUB_OUTPUT
          
          # Create Together API request payload for response generation
          if [[ "$MODERATION_RESULT" == "RELEVANT" ]]; then
            RESPONSE_PAYLOAD=$(cat << EOF
            {
              "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
              "messages": [
                {
                  "role": "system",
                  "content": "You are a helpful assistant responding to a GitHub issue. This issue has been determined to be RELEVANT to the project. Generate a friendly, helpful response thanking the user for creating the issue and acknowledging their contribution. Mention that the team will review it soon. Keep it concise (2-3 sentences max) and professional."
                },
                {
                  "role": "user",
                  "content": "Issue Title: ${ISSUE_TITLE}\nIssue Description: ${ISSUE_BODY}\n\nPlease generate a response for this relevant issue."
                }
              ],
              "temperature": 0.7,
              "max_tokens": 150
            }
            EOF
            )
          elif [[ "$MODERATION_RESULT" == "IRRELEVANT" ]]; then
            RESPONSE_PAYLOAD=$(cat << EOF
            {
              "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
              "messages": [
                {
                  "role": "system",
                  "content": "You are a helpful assistant responding to a GitHub issue. This issue has been determined to be IRRELEVANT to the project. Generate a polite response explaining that the issue appears to be outside the scope of this project. Suggest that they might want to check the project documentation or create a more specific issue. Keep it concise (2-3 sentences max), professional, and non-confrontational."
                },
                {
                  "role": "user",
                  "content": "Issue Title: ${ISSUE_TITLE}\nIssue Description: ${ISSUE_BODY}\n\nPlease generate a response for this irrelevant issue."
                }
              ],
              "temperature": 0.7,
              "max_tokens": 150
            }
            EOF
            )
          else
            RESPONSE_PAYLOAD=$(cat << EOF
            {
              "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
              "messages": [
                {
                  "role": "system",
                  "content": "You are a helpful assistant responding to a GitHub issue. The relevance of this issue is UNCLEAR. Generate a response asking for more information to help understand how this relates to the project. Be polite and helpful, suggesting what kind of details would be useful. Keep it concise (2-3 sentences max) and professional."
                },
                {
                  "role": "user",
                  "content": "Issue Title: ${ISSUE_TITLE}\nIssue Description: ${ISSUE_BODY}\n\nPlease generate a response for this unclear issue."
                }
              ],
              "temperature": 0.7,
              "max_tokens": 150
            }
            EOF
            )
          fi
          
          # Call Together API to generate a response
          RESPONSE=$(curl -s -X POST "https://api.together.xyz/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.TOGETHER_API_KEY }}" \
            -d "${RESPONSE_PAYLOAD}" | jq -r '.choices[0].message.content')
          
          # Save the response to an output variable, escaping newlines for GitHub Actions
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Comment on Issue
        if: steps.duplicate_check.outputs.is_duplicate != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const aiResponse = `${{ steps.moderation.outputs.response }}`;
            const moderationResult = '${{ steps.moderation.outputs.result }}';
            
            console.log(`Moderation result: ${moderationResult}`);
            
            // Fallback message in case the AI response is empty
            let message = aiResponse.trim() || 'Thanks for creating the issue. We appreciate your contribution!';
            
            // Add a label based on the moderation result
            if (moderationResult === 'RELEVANT') {
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['relevant']
              });
            } else if (moderationResult === 'IRRELEVANT') {
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['irrelevant']
              });
            } else {
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['needs-clarification']
              });
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            }); 