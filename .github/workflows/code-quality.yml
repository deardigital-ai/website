name: Code Quality Analysis

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**.js'
      - '**.jsx'
      - '**.ts'
      - '**.tsx'
      - '**.py'
      - '**.go'
      - '**.java'

jobs:
  analyze-code-quality:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.js$|\.jsx$|\.ts$|\.tsx$|\.py$|\.go$|\.java$' || echo "")
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No relevant files changed. Skipping code quality analysis."
            exit 0
          fi
          
          # Save the list to an output variable
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Analyze code quality
        id: quality-analysis
        run: |
          # Get the list of changed files
          CHANGED_FILES="${{ steps.changed-files.outputs.files }}"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No files to analyze"
            exit 0
          fi
          
          # Initialize results
          ANALYSIS_RESULTS=""
          
          # Process each file
          echo "$CHANGED_FILES" | while read -r FILE; do
            if [ ! -f "$FILE" ]; then
              echo "File $FILE no longer exists, skipping"
              continue
            fi
            
            echo "Analyzing code quality for $FILE"
            
            # Get file content
            FILE_CONTENT=$(cat "$FILE")
            
            # Determine file type
            FILE_EXT="${FILE##*.}"
            
            # Create the prompt text
            PROMPT_TEXT="You are a code quality expert. Analyze the following code file and provide specific, actionable suggestions for improvement.

            File: $FILE
            Language: $FILE_EXT
            
            ```
            $FILE_CONTENT
            ```
            
            Analyze this code for:
            1. Code smells and anti-patterns
            2. Performance issues
            3. Maintainability concerns
            4. Best practices violations
            
            For each issue found:
            - Specify the line number(s)
            - Explain why it's problematic
            - Suggest a specific improvement
            
            Focus on the 3-5 most important issues. Be concise but specific. If the code is high quality, acknowledge that but still provide at least 1-2 suggestions for improvement."
            
            # Create JSON payload for Ollama
            JSON_PAYLOAD="{\"model\": \"qwq:latest\", \"prompt\": $(echo "$PROMPT_TEXT" | jq -Rs .), \"stream\": false}"
            
            # Call Ollama API to analyze code quality
            FILE_ANALYSIS=$(curl -s -H "Content-Type: application/json" \
              -d "$JSON_PAYLOAD" \
              http://localhost:11434/api/generate | jq -r '.response' | \
              # Filter out <think> tags and their content
              sed -E 's/<think>.*<\/think>//g')
            
            # Add to results
            ANALYSIS_RESULTS="${ANALYSIS_RESULTS}
            
            ## $FILE
            
            ${FILE_ANALYSIS}
            
            ---"
          done
          
          # Save the analysis to an output variable
          echo "results<<EOF" >> $GITHUB_OUTPUT
          echo "$ANALYSIS_RESULTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const analysis = `${{ steps.quality-analysis.outputs.results }}`;
            
            if (!analysis || analysis.trim() === '') {
              console.log('No analysis results to comment');
              return;
            }
            
            // Add a header to the comment
            const comment = `## Code Quality Analysis üîç\n\nHere are some suggestions to improve code quality:\n\n${analysis}\n\n---\n*This is an automated analysis. Please consider these suggestions as opportunities for improvement.*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 