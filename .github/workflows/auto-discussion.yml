name: Auto Discussion Generator

on:
  schedule:
    - cron: '* * * * *'  # Run every minute (GitHub Actions doesn't support seconds)
  workflow_dispatch:  # Allow manual triggering

jobs:
  create-discussion:
    runs-on: self-hosted  # Use local runner like other actions
    
    steps:
      - name: Generate Discussion Content
        id: generate_content
        run: |
          # Create a timestamp for uniqueness
          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
          
          # Create the prompt for generating discussion topic
          TOPIC_PROMPT="You are a helpful AI assistant for a GitHub repository. Generate a single, engaging discussion topic related to either AI automation or GitHub. The topic should be concise (5-10 words) and thought-provoking. Focus on recent trends, best practices, or interesting use cases.

          Respond with ONLY the topic title. Don't include any other text, explanations, or formatting in your response."
          
          # Create JSON payload for Ollama
          TOPIC_PAYLOAD="{\"model\": \"qwq:latest\", \"prompt\": $(echo "$TOPIC_PROMPT" | jq -Rs .), \"stream\": false}"
          
          # Call Ollama API to generate the topic
          TOPIC=$(curl -s -H "Content-Type: application/json" \
            -d "$TOPIC_PAYLOAD" \
            http://localhost:11434/api/generate | jq -r '.response' | \
            # Filter out <think> tags and their content more thoroughly
            perl -pe 's/<think>.*?<\/think>//gs' | tr -d '\n' | xargs)
          
          echo "Generated raw topic: $TOPIC"
          
          # Create the prompt for generating discussion body
          BODY_PROMPT="You are a helpful AI assistant for a GitHub repository. Generate an engaging and informative discussion post about the following topic:

          Topic: $TOPIC

          The discussion should:
          1. Start with a friendly greeting
          2. Provide context about why this topic is important
          3. Include 2-3 key points or questions to spark conversation
          4. End with an invitation for community members to share their thoughts
          
          Keep the discussion body between 150-250 words. Make it conversational, informative, and engaging."
          
          # Create JSON payload for Ollama
          BODY_PAYLOAD="{\"model\": \"qwq:latest\", \"prompt\": $(echo "$BODY_PROMPT" | jq -Rs .), \"stream\": false}"
          
          # Call Ollama API to generate the body
          BODY=$(curl -s -H "Content-Type: application/json" \
            -d "$BODY_PAYLOAD" \
            http://localhost:11434/api/generate | jq -r '.response' | \
            # Filter out <think> tags and their content more thoroughly
            perl -pe 's/<think>.*?<\/think>//gs')
          
          # Save the topic and body to output variables, escaping newlines for GitHub Actions
          echo "topic<<EOF" >> $GITHUB_OUTPUT
          echo "$TOPIC" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Generate a unique ID for this discussion to avoid duplicates
          UNIQUE_ID=$(echo "$TOPIC $TIMESTAMP" | md5sum | cut -d' ' -f1)
          echo "unique_id=$UNIQUE_ID" >> $GITHUB_OUTPUT

      - name: Get Repository Node ID
        id: repo_info
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            // Query the repository node ID using GraphQL
            const result = await github.graphql(`
              query {
                repository(owner: "${owner}", name: "${repo}") {
                  id
                  discussionCategories(first: 1) {
                    nodes {
                      id
                      name
                    }
                  }
                }
              }
            `);
            
            console.log(`Repository Node ID: ${result.repository.id}`);
            
            // Get the first discussion category ID if available
            let categoryId = 'DIC_kwDOLYQwhs4CZvYA'; // Default fallback
            if (result.repository.discussionCategories.nodes.length > 0) {
              categoryId = result.repository.discussionCategories.nodes[0].id;
              console.log(`Using discussion category: ${result.repository.discussionCategories.nodes[0].name} (${categoryId})`);
            } else {
              console.log(`No discussion categories found, using default ID: ${categoryId}`);
            }
            
            return {
              repoId: result.repository.id,
              categoryId: categoryId
            };

      - name: Create GitHub Discussion
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const topic = `${{ steps.generate_content.outputs.topic }}`;
            const body = `${{ steps.generate_content.outputs.body }}`;
            const uniqueId = '${{ steps.generate_content.outputs.unique_id }}';
            const repoInfo = ${{ steps.repo_info.outputs.result }};
            
            // Log the generated content
            console.log(`Creating discussion with topic: ${topic}`);
            console.log(`Unique ID: ${uniqueId}`);
            console.log(`Repository ID: ${repoInfo.repoId}`);
            console.log(`Category ID: ${repoInfo.categoryId}`);
            
            try {
              // Create the discussion using GraphQL API
              const response = await github.graphql(`
                mutation {
                  createDiscussion(input: {
                    repositoryId: "${repoInfo.repoId}",
                    categoryId: "${repoInfo.categoryId}",
                    body: ${JSON.stringify(body)},
                    title: ${JSON.stringify(topic)}
                  }) {
                    discussion {
                      id
                      url
                    }
                  }
                }
              `);
              
              console.log(`Discussion created successfully: ${response.createDiscussion.discussion.url}`);
            } catch (error) {
              console.error(`Error creating discussion: ${error.message}`);
              // Don't fail the workflow if there's an error
              console.log('Continuing workflow despite error');
            } 