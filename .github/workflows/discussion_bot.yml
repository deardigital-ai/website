name: Discussion Bot

on:
  discussion:
    types: [created, edited]
  discussion_comment:
    types: [created, edited]

permissions:
  contents: read
  discussions: write

jobs:
  respond:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Write event payload to file
        run: |
          cat << 'EOF' > event_payload.json
          ${{ toJson(github.event) }}
          EOF
      
      - name: Create placeholder comment for discussion
        if: github.event_name == 'discussion'
        id: placeholder_discussion
        run: |
          # Extract discussion ID and repository from event payload
          DISCUSSION_ID=$(jq -r '.discussion.node_id' event_payload.json)
          REPO_OWNER=$(jq -r '.repository.owner.login' event_payload.json)
          REPO_NAME=$(jq -r '.repository.name' event_payload.json)
          
          # Create placeholder content with animated GIF and save to a file
          echo '<img src="https://user-images.githubusercontent.com/74038190/212284100-561aa473-3905-4a80-b561-0d28506553ee.gif" width="900">

          deardigital AI generating response...' > placeholder.txt
          
          # Create a simple GraphQL query with variables
          echo '{
            "query": "mutation($discussionId: ID!, $body: String!) { addDiscussionComment(input: { discussionId: $discussionId, body: $body }) { comment { id } } }",
            "variables": {
              "discussionId": "'$DISCUSSION_ID'",
              "body": "'$(cat placeholder.txt | sed 's/"/\\"/g' | tr '\n' ' ')'"
            }
          }' > payload.json
          
          # Print the payload for debugging
          echo "JSON Payload:"
          cat payload.json
          
          # Create the placeholder comment using GitHub API
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -d @payload.json \
            "https://api.github.com/graphql")
          
          # Print response for debugging
          echo "GraphQL Response: $RESPONSE"
          
          # Extract comment ID from response
          COMMENT_ID=$(echo $RESPONSE | jq -r '.data.addDiscussionComment.comment.id // "null"')
          echo "comment_id=$COMMENT_ID" >> $GITHUB_OUTPUT
          echo "Created placeholder comment with ID: $COMMENT_ID"
      
      - name: Create placeholder reply for comment
        if: github.event_name == 'discussion_comment'
        id: placeholder_comment
        run: |
          # Extract discussion ID, comment ID and repository from event payload
          DISCUSSION_ID=$(jq -r '.discussion.node_id' event_payload.json)
          COMMENT_ID=$(jq -r '.comment.node_id' event_payload.json)
          REPO_OWNER=$(jq -r '.repository.owner.login' event_payload.json)
          REPO_NAME=$(jq -r '.repository.name' event_payload.json)
          
          # Create placeholder content with animated GIF and save to a file
          echo '<img src="https://user-images.githubusercontent.com/74038190/212284100-561aa473-3905-4a80-b561-0d28506553ee.gif" width="900">

          deardigital AI generating response...' > placeholder.txt
          
          # Create a simple GraphQL query with variables
          echo '{
            "query": "mutation($discussionId: ID!, $replyToId: ID!, $body: String!) { addDiscussionComment(input: { discussionId: $discussionId, replyToId: $replyToId, body: $body }) { comment { id } } }",
            "variables": {
              "discussionId": "'$DISCUSSION_ID'",
              "replyToId": "'$COMMENT_ID'",
              "body": "'$(cat placeholder.txt | sed 's/"/\\"/g' | tr '\n' ' ')'"
            }
          }' > payload.json
          
          # Print the payload for debugging
          echo "JSON Payload:"
          cat payload.json
          
          # Create the placeholder reply using GitHub API
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -d @payload.json \
            "https://api.github.com/graphql")
          
          # Print response for debugging
          echo "GraphQL Response: $RESPONSE"
          
          # Extract comment ID from response
          REPLY_ID=$(echo $RESPONSE | jq -r '.data.addDiscussionComment.comment.id // "null"')
          echo "comment_id=$REPLY_ID" >> $GITHUB_OUTPUT
          echo "Created placeholder reply with ID: $REPLY_ID"
          
      - name: Run discussion bot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
          PLACEHOLDER_COMMENT_ID: ${{ github.event_name == 'discussion' && steps.placeholder_discussion.outputs.comment_id || steps.placeholder_comment.outputs.comment_id }}
        run: python python/main.py --github-event="${{ github.event_name }}" --event-payload-file="event_payload.json" --placeholder-id="${{ env.PLACEHOLDER_COMMENT_ID }}" 