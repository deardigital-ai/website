name: Discussion Assistant

on:
  discussion:
    types: [created]
  discussion_comment:
    types: [created, edited]

jobs:
  respond-to-discussion:
    runs-on: self-hosted
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Get discussion content
        id: get-content
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const eventName = context.eventName;
            let discussionContent = '';
            let discussionId = '';
            let commentId = null;
            
            if (eventName === 'discussion') {
              const discussion = context.payload.discussion;
              discussionContent = discussion.title + '\n\n' + discussion.body;
              discussionId = discussion.node_id;
            } else if (eventName === 'discussion_comment') {
              const comment = context.payload.comment;
              const discussion = context.payload.discussion;
              discussionContent = discussion.title + '\n\n' + comment.body;
              discussionId = discussion.node_id;
              commentId = comment.node_id;
            }
            
            // Get all previous comments to provide context
            let allContent = discussionContent;
            if (eventName === 'discussion_comment') {
              const { repository } = context.payload;
              const query = `
                query($owner: String!, $repo: String!, $discussionNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    discussion(number: $discussionNumber) {
                      comments(first: 100) {
                        nodes {
                          author {
                            login
                          }
                          body
                          createdAt
                        }
                      }
                    }
                  }
                }
              `;
              
              const variables = {
                owner: repository.owner.login,
                repo: repository.name,
                discussionNumber: context.payload.discussion.number
              };
              
              const result = await github.graphql(query, variables);
              const comments = result.repository.discussion.comments.nodes;
              
              // Append all previous comments to provide context
              if (comments.length > 0) {
                allContent += '\n\nPrevious comments:\n';
                for (const comment of comments) {
                  allContent += `\n@${comment.author.login} said: ${comment.body}\n`;
                }
              }
            }
            
            core.setOutput('discussion_content', allContent);
            core.setOutput('discussion_id', discussionId);
            core.setOutput('comment_id', commentId);
      
      - name: Call Together AI API
        id: ai-response
        run: |
          RESPONSE=$(curl -s -X POST "https://api.together.xyz/v1/chat/completions" \
            -H "Authorization: Bearer ${{ secrets.TOGETHER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "deepseek-ai/DeepSeek-R1",
              "messages": [{"role": "user", "content": "${{ steps.get-content.outputs.discussion_content }}"}]
            }')
          
          # Extract the content from the response
          CONTENT=$(echo $RESPONSE | jq -r '.choices[0].message.content')
          
          # Save the content to a file to preserve newlines and formatting
          echo "$CONTENT" > response.txt
          
          # Set the content as an output in a format that can be used in the next step
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat response.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Post response to discussion
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const eventName = context.eventName;
            const discussionId = '${{ steps.get-content.outputs.discussion_id }}';
            const commentId = '${{ steps.get-content.outputs.comment_id }}';
            const aiResponse = `${{ steps.ai-response.outputs.content }}`;
            
            // Add a comment with the AI response
            if (eventName === 'discussion') {
              // Add a new comment to the discussion
              await github.graphql(`
                mutation($discussionId: ID!, $body: String!) {
                  addDiscussionComment(input: {discussionId: $discussionId, body: $body}) {
                    comment {
                      id
                    }
                  }
                }
              `, {
                discussionId: discussionId,
                body: aiResponse
              });
            } else if (eventName === 'discussion_comment') {
              // Reply to the comment
              await github.graphql(`
                mutation($discussionId: ID!, $body: String!, $replyToId: ID) {
                  addDiscussionComment(input: {discussionId: $discussionId, body: $body, replyToId: $replyToId}) {
                    comment {
                      id
                    }
                  }
                }
              `, {
                discussionId: discussionId,
                body: aiResponse,
                replyToId: commentId
              });
            }
      
      - name: Get workflow run logs for analysis
        id: get-logs
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const workflowName = 'Discussion Assistant';
            
            // Get workflow ID by name
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner,
              repo
            });
            
            const workflow = workflows.workflows.find(w => w.name === workflowName);
            if (!workflow) {
              core.setFailed(`Could not find workflow with name: ${workflowName}`);
              return;
            }
            
            // Get workflow runs
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: workflow.id,
              per_page: 5  // Get the most recent runs
            });
            
            if (!runs.workflow_runs || runs.workflow_runs.length === 0) {
              core.setFailed('No workflow runs found');
              return;
            }
            
            // Get latest workflow run
            const latestRun = runs.workflow_runs[0];
            
            // Get logs URL - Fix API function name
            const { data: logsUrl } = await github.rest.actions.downloadWorkflowRunLogs({
              owner,
              repo,
              run_id: latestRun.id
            });
            
            // Download logs using curl
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            try {
              // Download the logs (which is a zip file)
              // The API returns a URL directly instead of an object with a url property
              const logsDownloadUrl = typeof logsUrl === 'string' ? logsUrl : logsUrl.url;
              execSync(`curl -L "${logsDownloadUrl}" -o logs.zip`);
              
              // Create directory for logs
              execSync('mkdir -p workflow_logs');
              
              // Extract the logs
              execSync('unzip -o logs.zip -d workflow_logs');
              
              // Read the workflow file
              const workflowContent = fs.readFileSync('.github/workflows/discussion-assistant.yml', 'utf8');
              
              // Combine all log files into a single file for analysis
              execSync('cat workflow_logs/*.txt > combined_logs.txt');
              const logContent = fs.readFileSync('combined_logs.txt', 'utf8');
              
              // Store the content for the next step
              fs.writeFileSync('workflow_file.yml', workflowContent);
              
              // Set outputs in a format that works with GitHub Actions
              core.setOutput('result', 'success');
              
              // Due to limitations with large outputs, we'll rely on the files
              // rather than trying to pass the content through outputs
              console.log('Logs and workflow file prepared successfully');
              return 'success';
            } catch (error) {
              core.setFailed(`Error processing logs: ${error.message}`);
              return null;
            }
      
      - name: Analyze logs and suggest improvements
        id: analyze-logs
        if: success() && steps.get-logs.outputs.result != ''
        run: |
          # Check if the workflow_file.yml exists before proceeding
          if [ ! -f "workflow_file.yml" ]; then
            echo "::error::workflow_file.yml not found. Skipping analysis."
            exit 0
          fi
          
          # Check if combined_logs.txt exists before proceeding
          if [ ! -f "combined_logs.txt" ]; then
            echo "::error::combined_logs.txt not found. Skipping analysis."
            exit 0
          fi
          
          # Get workflow content and logs from previous step
          WORKFLOW_CONTENT=$(cat workflow_file.yml)
          LOG_CONTENT=$(cat combined_logs.txt)
          
          # Create the prompt for analysis
          ANALYSIS_PROMPT="Analyze the following GitHub Action workflow and its execution logs. 
          
          WORKFLOW FILE:
          \`\`\`yaml
          $WORKFLOW_CONTENT
          \`\`\`
          
          EXECUTION LOGS (partial):
          \`\`\`
          $LOG_CONTENT
          \`\`\`
          
          Please analyze these logs and the workflow configuration to identify any potential issues, inefficiencies, or improvements that could be made. Consider:
          
          1. Error patterns or warnings in the logs
          2. Performance bottlenecks
          3. Best practices for GitHub Actions that aren't being followed
          4. Security concerns
          5. Reliability improvements
          6. Code quality suggestions
          
          If you find any potential improvements:
          1. Provide a detailed explanation of each issue
          2. Suggest a specific solution with example code where appropriate
          3. Explain the benefits of implementing the suggested changes
          
          Format your response as a structured GitHub issue that could be created to track these improvements."
          
          # Call Together AI API for analysis
          RESPONSE=$(curl -s -X POST "https://api.together.xyz/v1/chat/completions" \
            -H "Authorization: Bearer ${{ secrets.TOGETHER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"model\": \"deepseek-ai/DeepSeek-R1\",
              \"messages\": [{\"role\": \"user\", \"content\": \"$ANALYSIS_PROMPT\"}]
            }")
          
          # Extract the content from the response
          ANALYSIS=$(echo $RESPONSE | jq -r '.choices[0].message.content')
          
          # Save the analysis to a file
          echo "$ANALYSIS" > workflow_analysis.txt
          
          # Check if the analysis contains suggestions (simple heuristic)
          if grep -q -i "improvement\|issue\|suggestion\|recommend\|fix\|enhance" workflow_analysis.txt; then
            echo "has_suggestions=true" >> $GITHUB_OUTPUT
            
            # Format for GitHub output
            echo "analysis<<EOF" >> $GITHUB_OUTPUT
            cat workflow_analysis.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "has_suggestions=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create improvement issue
        if: steps.analyze-logs.outputs.has_suggestions == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const analysis = `${{ steps.analyze-logs.outputs.analysis }}`;
            
            // Determine a good title from the analysis (take first line or generate one)
            let title = "Workflow Improvement Suggestions for Discussion Assistant";
            const firstLine = analysis.split('\n')[0].trim();
            if (firstLine && firstLine.length > 10 && firstLine.length < 100) {
              title = firstLine;
            }
            
            // Get repository owner for assignee
            const { data: repoData } = await github.rest.repos.get({
              owner,
              repo
            });
            
            const assignee = repoData.owner.login;
            
            // Create the issue
            await github.rest.issues.create({
              owner,
              repo,
              title,
              body: analysis,
              labels: ['automation', 'improvement', 'workflow'],
              assignees: [assignee]
            });
            
            console.log(`Created improvement issue: ${title}`); 